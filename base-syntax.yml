# This file is shared and exists so that we don't repeat ourselves in
# liquid.YAML-tmLanguage and liquid-injection.YAML-tmLanguage. Our
# build tool will merge these into the other files.
repository:

  # block comments
  comment_block:
    begin: '{%-?\s*comment\s*-?%}'
    end: '{%-?\s*endcomment\s*-?%}'
    name: comment.block.liquid

  # new comment syntax
  comment_inline:
    begin: '{%-?\s*#'
    end: '-?%}'
    name: comment.line.number-sign.liquid

  tag:
    begin: '{%-?'
    end: '-?%}'
    name: meta.tag.liquid
    beginCaptures:
      0:
        name: punctuation.section.braces.begin.tag.liquid
    endCaptures:
      0:
        name: punctuation.section.braces.end.tag.liquid
    patterns:
      - include: '#tag_body'

  tag_injection:
    # Here the begin makes sure we're not closing the tag because
    # otherwise our parent syntax would never close. Since The injection
    # would think that endstyle/endjavascript was part of the
    # injection
    begin: '{%-?(?!\s*(endstyle|endjavascript|endcomment))'
    end: '-?%}'
    name: punctuation.tag.liquid
    beginCaptures:
      0:
        name: meta.embedded.punctuation.definition.block.liquid.tag
    endCaptures:
      0:
        name: meta.embedded.punctuation.definition.block.liquid.tag
    patterns:
      - include: '#tag_body'

  tag_body:
    patterns:
      - include: '#tag_liquid'
      - include: '#tag_case'
      - include: '#tag_conditional'
      - include: '#tag_for'
      - include: '#tag_tablerow'
      - include: '#tag_expression'

  tag_liquid:
    name: meta.entity.tag.liquid.liquid
    begin: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(liquid)\b'
    beginCaptures:
      1: { name: keyword.control.liquid.liquid }
    end: '(?=%})'
    patterns:
      - include: '#tag_case_liquid'
      - include: '#tag_conditional_liquid'
      - include: '#tag_for_liquid'
      - include: '#tag_tablerow_liquid'
      - include: '#tag_expression_liquid'

  tag_tablerow:
    name: meta.entity.tag.tablerow.liquid
    begin: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(tablerow)\b'
    beginCaptures:
      1: { name: keyword.control.tablerow.liquid }
    end: '(?=%})'
    patterns:
      - include: '#tag_tablerow_body'

  tag_tablerow_liquid:
    name: meta.entity.tag.tablerow.liquid
    begin: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(tablerow)\b'
    beginCaptures:
      1: { name: keyword.control.tablerow.liquid }
    end: '$'
    patterns:
      - include: '#tag_tablerow_body'

  tag_tablerow_body:
    patterns:
      - match: '\b(in)\b'
        name: keyword.control.liquid
      - match: '\b(cols|offset|limit):'
        name: keyword.control.liquid
      - include: '#value_expression'

  tag_for:
    name: meta.entity.tag.for.liquid
    begin: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(for)\b'
    beginCaptures:
      1: { name: keyword.control.for.liquid }
    end: '(?=%})'
    patterns:
      - include: '#tag_for_body'

  tag_for_liquid:
    name: meta.entity.tag.for.liquid
    begin: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(for)\b'
    beginCaptures:
      1: { name: keyword.control.for.liquid }
    end: '$'
    patterns:
      - include: '#tag_for_body'

  tag_for_body:
    patterns:
      - match: '\b(in|reversed)\b'
        name: keyword.control.liquid
      - match: '\b(offset|limit):'
        name: keyword.control.liquid
      - include: '#value_expression'

  tag_conditional:
    name: meta.entity.tag.conditional.liquid
    begin: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(if|elsif|unless)\b'
    beginCaptures:
      1: { name: keyword.control.conditional.liquid }
    end: '(?=%})'
    patterns:
      - include: '#value_expression'

  tag_conditional_liquid:
    name: meta.entity.tag.conditional.liquid
    begin: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(if|elsif|unless)\b'
    beginCaptures:
      1: { name: keyword.control.conditional.liquid }
    end: '$'
    patterns:
      - include: '#value_expression'

  tag_case:
    name: meta.entity.tag.case.liquid
    begin: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(case|when)\b'
    beginCaptures:
      1: { name: keyword.control.case.liquid }
    end: '(?=%})'
    patterns:
      - include: '#value_expression'

  tag_case_liquid:
    name: meta.entity.tag.case.liquid
    begin: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(case|when)\b'
    beginCaptures:
      1: { name: keyword.control.case.liquid }
    end: '$'
    patterns:
      - include: '#value_expression'

  tag_expression_without_arguments:
    patterns:
      # The ugly regex at the beginning is to check if you start with
      # {%, {%- or the start of the line but without capturing the
      # result.
      - match: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(endunless|endif)\b'
        captures:
          1: { name: keyword.control.conditional.liquid }
      - match: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(endfor|endtablerow)\b'
        captures:
          1: { name: keyword.control.loop.liquid }
      - match: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(endcase)\b'
        captures:
          1: { name: keyword.control.case.liquid }
      - match: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(else|break|continue)\b'
        captures:
          1: { name: keyword.control.liquid }

  tag_expression:
    patterns:
      - include: '#tag_expression_without_arguments'
      - begin: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(\w+)'
        beginCaptures:
          1: { name: entity.name.tag.liquid }
        end: '(?=%})'
        name: meta.entity.tag.other.liquid
        patterns:
          - include: '#value_expression'

  tag_expression_liquid:
    patterns:
      - include: '#tag_expression_without_arguments'
      - begin: '(?:(?:(?<={%)|(?<={%-)|^)\s*)(\w+)'
        beginCaptures:
          1: { name: entity.name.tag.liquid }
        end: '$'
        name: meta.entity.tag.other.liquid
        patterns:
          - include: '#value_expression'

  object:
    begin: '{{-?'
    end: '-?}}'
    name: meta.object.liquid
    beginCaptures:
      0:
        name: punctuation.section.braces.begin.liquid
    endCaptures:
      0:
        name: punctuation.section.braces.end.liquid
    patterns:
      - include: '#value_expression'

  # Parens without .. in the middle are not supported in conditions
  invalid_range:
    match: '\((.(?!\.\.))+\)'
    name: invalid.illegal.range.liquid

  range:
    begin: '\('
    end: '\)'
    name: meta.range.liquid
    beginCaptures:
      0: { name: punctuation.section.parens.begin.liquid }
    endCaptures:
      0: { name: punctuation.section.parens.end.liquid }
    patterns:
      - match: '\.\.'
        name: 'punctuation.range.liquid'
      - include: '#variable_lookup'
      - include: '#number'

  number:
    match: '((-|\+)\s*)?[0-9]+(\.[0-9]+)?'
    name: constant.numeric.liquid

  string:
    patterns:
      - include: '#string_single'
      - include: '#string_double'

  string_double:
    begin: '"'
    end: '"'
    name: string.quoted.double.liquid

  string_single:
    begin: "'"
    end: "'"
    name: string.quoted.single.liquid

  variable_lookup:
    patterns:
        # Stuff provided by the language has its own colour
      - match: \b(<%= ANY_GLOBAL_OBJECT %>)\b
        name: variable.language.liquid

        # a parameter name following a colon. e.g. "var" in `product: var`
      - match: '((?<=\w\:\s)\w+)'
        name: variable.parameter.liquid

        # square brackets accessor
      - begin: (?<=\w)\[
        beginCaptures:
          0: { name: punctuation.section.brackets.begin.liquid }
        end: \]
        endCaptures:
          0: { name: punctuation.section.brackets.end.liquid }
        name: meta.brackets.liquid
        patterns:
          - include: '#string'

        # what follows the dot in a variable
      - match: (?<=(\w|\])\.)([-\w]+\??)
        name: variable.other.member.liquid

        # the literal dot
      - match: (?<=\w)\.(?=\w)
        name: punctuation.accessor.liquid

        # the beginning of the variable
      - match: (?i)[a-z_](\w|(?:-(?!\}\})))*
        name: variable.other.liquid

  operator:
    match: '(?:(?<=\s)|\b)(<%= ANY_OPERATOR %>)(?:(?=\s)|\b)'
    captures:
      1: { name: keyword.operator.expression.liquid }

  language_constant:
    match: \b(false|true|nil|blank|empty)\b(!=\?)
    name: constant.language.liquid

  value_expression:
    patterns:
        # TODO ???
      - match: '(\[)(\|)(?=[^\]]*)(?=\])'
        captures:
          '2': { name: invalid.illegal.filter.liquid }
          '3': { name: invalid.illegal.filter.liquid }

        # TODO ???
      - match: '(?<=\s)(\+|\-|\/|\*)(?=\s)'
        name: invalid.illegal.filter.liquid

      - include: '#language_constant'
      - include: '#operator'

        # filter with args (e.g. "at_most" in `| at_most: 1` )
      - match: '\|\s+(?![\.0-9])[a-zA-Z0-9_-]+\:\s+'
        name: support.function.with-args.liquid

        # filter without args (e.g. "first" in `| first` )
      - match: '\|\s+(?![\.0-9])[a-zA-Z0-9_-]+\s+'
        name: support.function.without-args.liquid

      #   # TODO ???
      # - match: '(?<=\s)(with|offset\:|limit\:)(?=\s)'
      #   name: keyword.control.liquid
      #
      #   # TODO ???
      # - captures:
      #     '2': { name: invalid.illegal.argument.liquid }
      #   match: '(?<=include)(.*)(with\:|offset|limit)(?=\s)'
      #
      #   # TODO ???
      # - match: '(?<=\s)(\w+\:)(?=\:\s)'
      #   name: invalid.illegal.liquid

      - include: '#invalid_range'
      - include: '#range'
      - include: '#number'
      - include: '#string'
      - include: '#variable_lookup'
