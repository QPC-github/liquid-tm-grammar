# This file is shared and exists so that we don't repeat ourselves in
# liquid.YAML-tmLanguage and liquid-injection.YAML-tmLanguage. Our
# build tool will merge these into the other files.
repository:

  # block comments
  comment_block:
    begin: '{%-?\s*comment\s*-?%}'
    end: '{%-?\s*endcomment\s*-?%}'
    name: comment.block.liquid

  # new comment syntax
  comment_inline:
    begin: '{%-?\s*#'
    end: '-?%}'
    name: comment.line.number-sign.liquid

  assign_op:
    patterns:
      - match: /=
        name: keyword.operator.assignment.augmented.liquid

  logic_expression:
    patterns:
      - match: /=
        name: keyword.operator.assignment.augmented.liquid

  logic_op:
    patterns:
      - match: \s+(and|or|not|contains|(\!\=|\=\=|<\=|>\=|<|>)\s+
        name: keyword.operator.logical.liquid

  tag:
    begin: '{%-?'
    end: '-?%}'
    name: meta.braces.liquid
    beginCaptures:
      0:
        name: punctuation.section.braces.begin.tag.liquid
    endCaptures:
      0:
        name: punctuation.section.braces.end.tag.liquid
    patterns:
      - include: '#template_tag_name'
      - include: '#template_tag_keyword'
      - include: '#template_var'

  tag_injection:
    # Here the begin makes sure we're not closing the tag because
    # otherwise our parent syntax would never close. Since The injection
    # would think that endstyle/endjavascript was part of the
    # injection
    begin: '{%-?(?!\s*(endstyle|endjavascript|endcomment))'
    end: '-?%}'
    name: punctuation.tag.liquid
    beginCaptures:
      0:
        name: meta.embedded.punctuation.definition.block.liquid.tag
    endCaptures:
      0:
        name: meta.embedded.punctuation.definition.block.liquid.tag
    patterns:
      - include: '#template_tag_name'
      - include: '#template_tag_keyword'
      - include: '#template_var'

  template_tag_name:
    patterns:
      - match: '(?<={%-?|^)\s*\b(else|break|continue)\b'
        name: keyword.control.liquid
      - match: '(?<={%-?|^)\s*\b(if|unless|else|eslif|endunless|endif)\b'
        name: keyword.control.conditional.liquid
      - match: '(?<={%-?|^)\s*\b(for|endfor|cycle|tablerow|endtablerow)\b'
        name: keyword.control.loop.liquid
      - match: '(?<={%-?|^)\s*\b(case|when|endcase)\b'
        name: keyword.control.switch.liquid
      - match: '(?<={%-?|^)\s*(\w+)'
        name: entity.name.tag.liquid

  template_tag_keyword:
    patterns:
      - match: '\b(reversed|in):'
        name: keyword.control.liquid
      - match: '\b(cols|offset|limit):'
        name: keyword.control.liquid

  object:
    begin: '{{-?'
    end: '-?}}'
    name: meta.braces.liquid
    beginCaptures:
      0:
        name: punctuation.section.braces.begin.liquid
    endCaptures:
      0:
        name: punctuation.section.braces.end.liquid
    patterns:
      - include: '#template_var'

  number:
    match: '((-|\+)\s*)?[0-9]+(\.[0-9]+)?'
    name: constant.numeric.liquid

  string:
    patterns:
      - include: '#string_single'
      - include: '#string_double'

  string_double:
    begin: '"'
    end: '"'
    name: string.quoted.double.liquid

  string_single:
    begin: "'"
    end: "'"
    name: string.quoted.single.liquid

  variable_lookup:
    patterns:
        # Stuff provided by the language has its own colour
      - match: \b(<%= ANY_GLOBAL_OBJECT %>)\b
        name: variable.language.liquid

        # a parameter name following a colon. e.g. "var" in `product: var`
      - match: '((?<=\w\:\s)\w+)'
        name: variable.parameter.liquid

        # square brackets accessor
      - begin: (?<=\w)\[
        beginCaptures:
          0: { name: punctuation.section.brackets.begin.liquid }
        end: \]
        endCaptures:
          0: { name: punctuation.section.brackets.end.liquid }
        name: meta.brackets.liquid
        patterns:
          - include: '#string'

        # what follows the dot in a variable
      - match: (?<=\.)(\w+)\b
        name: variable.other.member.liquid

        # the literal dot
      - match: (?<=\w)\.(?=\w)
        name: punctuation.accessor.liquid

        # the beginning of the variable
      - match: (?i)[a-z_]\w*
        name: variable.other.liquid


  template_var:
    patterns:
        # TODO ???
      - match: '(\[)(\|)(?=[^\]]*)(?=\])'
        captures:
          '2': { name: invalid.illegal.filter.liquid }
          '3': { name: invalid.illegal.filter.liquid }

        # TODO ???
      - match: '(?<=\s)(\+|\-|\/|\*)(?=\s)'
        name: invalid.illegal.filter.liquid

        # constants
      - match: (false|true|nil|blank)
        name: constant.language.liquid

        # TODO ??
      - captures:
          '3': { name: invalid.illegal.operator.liquid }
        match: '(?=if|unless|elsif)\s*[^%}]+\s(in)\s'

        # operators
      - match: \s+(and|or|not|contains|in|by|((\!|\=|\<|\>)\=))\s+
        name: keyword.operator.expression.liquid

        # TODO ???
      - captures:
          '2': { name: invalid.illegal.assignment.liquid }
        match: '(?<=assign)([^\=]+)(\=\=+)'

        # filter with args (e.g. "at_most" in `| at_most: 1` )
      - match: '\|\s+(?![\.0-9])[a-zA-Z0-9_-]+\:\s+'
        name: support.function.with-args.liquid

        # filter without args (e.g. "first" in `| first` )
      - match: '\|\s+(?![\.0-9])[a-zA-Z0-9_-]+\s+'
        name: support.function.without-args.liquid

        # TODO ???
      - match: '(?<=\s)(with|offset\:|limit\:)(?=\s)'
        name: keyword.control.liquid

        # TODO ???
      - captures:
          '2': { name: invalid.illegal.argument.liquid }
        match: '(?<=include)(.*)(with\:|offset|limit)(?=\s)'

        # TODO ???
      - match: '(?<=\s)(\w+\:)(?=\:\s)'
        name: invalid.illegal.liquid

      - include: '#number'
      - include: '#string'
      - include: '#variable_lookup'
