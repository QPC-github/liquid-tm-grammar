{
  "scopeName": "liquid.injection",
  "injectionSelector": "L:meta.embedded.block.js,\nL:meta.embedded.block.css,\nL:meta.embedded.block.html,\nL:string.quoted\n",
  "patterns": [
    {
      "include": "#raw_tag"
    },
    {
      "include": "#comment_block"
    },
    {
      "include": "#comment_inline"
    },
    {
      "include": "#object"
    },
    {
      "include": "#tag_injection"
    }
  ],
  "repository": {
    "raw_tag": {
      "begin": "{%-?\\s*(raw)\\s*-?%}",
      "end": "{%-?\\s*(endraw)\\s*-?%}",
      "beginCaptures": {
        "1": {
          "name": "entity.name.tag.liquid"
        }
      },
      "endCaptures": {
        "1": {
          "name": "entity.name.tag.liquid"
        }
      },
      "name": "meta.entity.tag.other.liquid",
      "contentName": "string.unquoted.liquid"
    },
    "comment_block": {
      "begin": "{%-?\\s*comment\\s*-?%}",
      "end": "{%-?\\s*endcomment\\s*-?%}",
      "name": "comment.block.liquid"
    },
    "comment_inline": {
      "begin": "{%-?\\s*#",
      "end": "-?%}",
      "name": "comment.line.number-sign.liquid"
    },
    "tag": {
      "begin": "{%-?",
      "end": "-?%}",
      "name": "meta.tag.liquid",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.braces.begin.tag.liquid"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.braces.end.tag.liquid"
        }
      },
      "patterns": [
        {
          "include": "#tag_body"
        }
      ]
    },
    "tag_injection": {
      "begin": "{%-?(?!\\s*(endstyle|endjavascript|endcomment))",
      "end": "-?%}",
      "name": "punctuation.tag.liquid",
      "beginCaptures": {
        "0": {
          "name": "meta.embedded.punctuation.definition.block.liquid.tag"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.embedded.punctuation.definition.block.liquid.tag"
        }
      },
      "patterns": [
        {
          "include": "#tag_body"
        }
      ]
    },
    "tag_body": {
      "patterns": [
        {
          "include": "#tag_liquid"
        },
        {
          "include": "#tag_case"
        },
        {
          "include": "#tag_conditional"
        },
        {
          "include": "#tag_for"
        },
        {
          "include": "#tag_paginate"
        },
        {
          "include": "#tag_tablerow"
        },
        {
          "include": "#tag_expression"
        }
      ]
    },
    "tag_liquid": {
      "name": "meta.entity.tag.liquid.liquid",
      "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(liquid)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.liquid.liquid"
        }
      },
      "end": "(?=%})",
      "patterns": [
        {
          "include": "#tag_case_liquid"
        },
        {
          "include": "#tag_conditional_liquid"
        },
        {
          "include": "#tag_for_liquid"
        },
        {
          "include": "#tag_paginate_liquid"
        },
        {
          "include": "#tag_tablerow_liquid"
        },
        {
          "include": "#tag_expression_liquid"
        }
      ]
    },
    "tag_tablerow": {
      "name": "meta.entity.tag.tablerow.liquid",
      "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(tablerow)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.tablerow.liquid"
        }
      },
      "end": "(?=%})",
      "patterns": [
        {
          "include": "#tag_tablerow_body"
        }
      ]
    },
    "tag_tablerow_liquid": {
      "name": "meta.entity.tag.tablerow.liquid",
      "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(tablerow)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.tablerow.liquid"
        }
      },
      "end": "$",
      "patterns": [
        {
          "include": "#tag_tablerow_body"
        }
      ]
    },
    "tag_tablerow_body": {
      "patterns": [
        {
          "match": "\\b(in)\\b",
          "name": "keyword.control.liquid"
        },
        {
          "match": "\\b(cols|offset|limit):",
          "name": "keyword.control.liquid"
        },
        {
          "include": "#value_expression"
        }
      ]
    },
    "tag_for": {
      "name": "meta.entity.tag.for.liquid",
      "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(for)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.for.liquid"
        }
      },
      "end": "(?=%})",
      "patterns": [
        {
          "include": "#tag_for_body"
        }
      ]
    },
    "tag_for_liquid": {
      "name": "meta.entity.tag.for.liquid",
      "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(for)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.for.liquid"
        }
      },
      "end": "$",
      "patterns": [
        {
          "include": "#tag_for_body"
        }
      ]
    },
    "tag_for_body": {
      "patterns": [
        {
          "match": "\\b(in|reversed)\\b",
          "name": "keyword.control.liquid"
        },
        {
          "match": "\\b(offset|limit):",
          "name": "keyword.control.liquid"
        },
        {
          "include": "#value_expression"
        }
      ]
    },
    "tag_paginate": {
      "name": "meta.entity.tag.paginate.liquid",
      "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(paginate)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.paginate.liquid"
        }
      },
      "end": "(?=%})",
      "patterns": [
        {
          "include": "#tag_paginate_body"
        }
      ]
    },
    "tag_paginate_liquid": {
      "name": "meta.entity.tag.paginate.liquid",
      "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(paginate)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.paginate.liquid"
        }
      },
      "end": "$",
      "patterns": [
        {
          "include": "#tag_paginate_body"
        }
      ]
    },
    "tag_paginate_body": {
      "patterns": [
        {
          "match": "\\b(by)\\b",
          "name": "keyword.control.liquid"
        },
        {
          "include": "#value_expression"
        }
      ]
    },
    "tag_conditional": {
      "name": "meta.entity.tag.conditional.liquid",
      "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(if|elsif|unless)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.conditional.liquid"
        }
      },
      "end": "(?=%})",
      "patterns": [
        {
          "include": "#value_expression"
        }
      ]
    },
    "tag_conditional_liquid": {
      "name": "meta.entity.tag.conditional.liquid",
      "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(if|elsif|unless)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.conditional.liquid"
        }
      },
      "end": "$",
      "patterns": [
        {
          "include": "#value_expression"
        }
      ]
    },
    "tag_case": {
      "name": "meta.entity.tag.case.liquid",
      "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(case|when)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.case.liquid"
        }
      },
      "end": "(?=%})",
      "patterns": [
        {
          "include": "#value_expression"
        }
      ]
    },
    "tag_case_liquid": {
      "name": "meta.entity.tag.case.liquid",
      "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(case|when)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.case.liquid"
        }
      },
      "end": "$",
      "patterns": [
        {
          "include": "#value_expression"
        }
      ]
    },
    "tag_expression_without_arguments": {
      "patterns": [
        {
          "match": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(endunless|endif)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.conditional.liquid"
            }
          }
        },
        {
          "match": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(endfor|endtablerow|endpaginate)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.loop.liquid"
            }
          }
        },
        {
          "match": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(endcase)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.case.liquid"
            }
          }
        },
        {
          "match": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(else|break|continue)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.liquid"
            }
          }
        }
      ]
    },
    "tag_expression": {
      "patterns": [
        {
          "include": "#tag_expression_without_arguments"
        },
        {
          "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(\\w+)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.liquid"
            }
          },
          "end": "(?=%})",
          "name": "meta.entity.tag.other.liquid",
          "patterns": [
            {
              "include": "#value_expression"
            }
          ]
        }
      ]
    },
    "tag_expression_liquid": {
      "patterns": [
        {
          "include": "#tag_expression_without_arguments"
        },
        {
          "begin": "(?:(?:(?<={%)|(?<={%-)|^)\\s*)(\\w+)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.liquid"
            }
          },
          "end": "$",
          "name": "meta.entity.tag.other.liquid",
          "patterns": [
            {
              "include": "#value_expression"
            }
          ]
        }
      ]
    },
    "object": {
      "begin": "{{-?",
      "end": "-?}}",
      "name": "meta.object.liquid",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.braces.begin.liquid"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.braces.end.liquid"
        }
      },
      "patterns": [
        {
          "include": "#value_expression"
        }
      ]
    },
    "invalid_range": {
      "match": "\\((.(?!\\.\\.))+\\)",
      "name": "invalid.illegal.range.liquid"
    },
    "range": {
      "begin": "\\(",
      "end": "\\)",
      "name": "meta.range.liquid",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.liquid"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.liquid"
        }
      },
      "patterns": [
        {
          "match": "\\.\\.",
          "name": "punctuation.range.liquid"
        },
        {
          "include": "#variable_lookup"
        },
        {
          "include": "#number"
        }
      ]
    },
    "number": {
      "match": "((-|\\+)\\s*)?[0-9]+(\\.[0-9]+)?",
      "name": "constant.numeric.liquid"
    },
    "string": {
      "patterns": [
        {
          "include": "#string_single"
        },
        {
          "include": "#string_double"
        }
      ]
    },
    "string_double": {
      "begin": "\"",
      "end": "\"",
      "name": "string.quoted.double.liquid"
    },
    "string_single": {
      "begin": "'",
      "end": "'",
      "name": "string.quoted.single.liquid"
    },
    "variable_lookup": {
      "patterns": [
        {
          "match": "\\b(additional_checkout_buttons|address|all_country_option_tags|all_products|article|articles|block|blog|blogs|canonical_url|cart|checkout|collection|collections|comment|content_for_additional_checkout_buttons|content_for_header|content_for_index|content_for_layout|country_option_tags|currency|current_page|current_tags|customer|customer_address|discount_allocation|discount_application|external_video|font|forloop|form|fulfillment|gift_card|handle|image|images|line_item|link|linklist|linklists|location|localization|metafield|model|model_source|order|page|page_description|page_image|page_title|pages|paginate|part|policy|powered_by_link|predictive_search|product|product_option|product_variant|recommendations|request|routes|script|scripts|search|section|selling_plan|selling_plan_allocation|selling_plan_group|settings|shipping_method|shop|shop_locale|store_availability|tablerow|tax_line|template|theme|transaction|unit_price_measurement|variant|video|video_source)\\b",
          "name": "variable.language.liquid"
        },
        {
          "match": "((?<=\\w\\:\\s)\\w+)",
          "name": "variable.parameter.liquid"
        },
        {
          "begin": "(?<=\\w)\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.brackets.begin.liquid"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.brackets.end.liquid"
            }
          },
          "name": "meta.brackets.liquid",
          "patterns": [
            {
              "include": "#string"
            }
          ]
        },
        {
          "match": "(?<=(\\w|\\])\\.)([-\\w]+\\??)",
          "name": "variable.other.member.liquid"
        },
        {
          "match": "(?<=\\w)\\.(?=\\w)",
          "name": "punctuation.accessor.liquid"
        },
        {
          "match": "(?i)[a-z_](\\w|(?:-(?!\\}\\})))*",
          "name": "variable.other.liquid"
        }
      ]
    },
    "operator": {
      "match": "(?:(?<=\\s)|\\b)(\\=\\=|!\\=|\\>|\\<|\\>\\=|\\<\\=|or|and|contains)(?:(?=\\s)|\\b)",
      "captures": {
        "1": {
          "name": "keyword.operator.expression.liquid"
        }
      }
    },
    "language_constant": {
      "match": "\\b(false|true|nil|blank|empty)\\b(!=\\?)",
      "name": "constant.language.liquid"
    },
    "value_expression": {
      "patterns": [
        {
          "match": "(\\[)(\\|)(?=[^\\]]*)(?=\\])",
          "captures": {
            "2": {
              "name": "invalid.illegal.filter.liquid"
            },
            "3": {
              "name": "invalid.illegal.filter.liquid"
            }
          }
        },
        {
          "match": "(?<=\\s)(\\+|\\-|\\/|\\*)(?=\\s)",
          "name": "invalid.illegal.filter.liquid"
        },
        {
          "include": "#language_constant"
        },
        {
          "include": "#operator"
        },
        {
          "match": "\\|\\s+(?![\\.0-9])[a-zA-Z0-9_-]+\\:\\s+",
          "name": "support.function.with-args.liquid"
        },
        {
          "match": "\\|\\s+(?![\\.0-9])[a-zA-Z0-9_-]+\\s+",
          "name": "support.function.without-args.liquid"
        },
        {
          "include": "#invalid_range"
        },
        {
          "include": "#range"
        },
        {
          "include": "#number"
        },
        {
          "include": "#string"
        },
        {
          "include": "#variable_lookup"
        }
      ]
    }
  }
}