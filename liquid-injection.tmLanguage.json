{
  "scopeName": "liquid.injection",
  "injectionSelector": "L:meta.embedded.block.js,\nL:meta.embedded.block.css,\nL:meta.embedded.block.html,\nL:string.quoted\n",
  "patterns": [
    {
      "include": "#comment_block"
    },
    {
      "include": "#comment_inline"
    },
    {
      "include": "#object"
    },
    {
      "include": "#tag_injection"
    }
  ],
  "repository": {
    "comment_block": {
      "begin": "{%-?\\s*comment\\s*-?%}",
      "end": "{%-?\\s*endcomment\\s*-?%}",
      "name": "comment.block.liquid"
    },
    "comment_inline": {
      "begin": "{%-?\\s*#",
      "end": "-?%}",
      "name": "comment.line.number-sign.liquid"
    },
    "assign_op": {
      "patterns": [
        {
          "match": "/=",
          "name": "keyword.operator.assignment.augmented.liquid"
        }
      ]
    },
    "logic_expression": {
      "patterns": [
        {
          "match": "/=",
          "name": "keyword.operator.assignment.augmented.liquid"
        }
      ]
    },
    "logic_op": {
      "patterns": [
        {
          "match": "\\s+(and|or|not|contains|(\\!\\=|\\=\\=|<\\=|>\\=|<|>)\\s+",
          "name": "keyword.operator.logical.liquid"
        }
      ]
    },
    "tag": {
      "begin": "{%-?",
      "end": "-?%}",
      "name": "punctuation.tag.liquid",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.liquid.tag"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.liquid.tag"
        }
      },
      "patterns": [
        {
          "include": "#template_tag_name"
        },
        {
          "include": "#template_tag_keyword"
        },
        {
          "include": "#template_var"
        }
      ]
    },
    "tag_injection": {
      "begin": "{%-?(?!\\s*(endstyle|endjavascript|endcomment))",
      "end": "-?%}",
      "name": "punctuation.tag.liquid",
      "beginCaptures": {
        "0": {
          "name": "meta.embedded.punctuation.definition.block.liquid.tag"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.embedded.punctuation.definition.block.liquid.tag"
        }
      },
      "patterns": [
        {
          "include": "#template_tag_name"
        },
        {
          "include": "#template_tag_keyword"
        },
        {
          "include": "#template_var"
        }
      ]
    },
    "template_tag_name": {
      "patterns": [
        {
          "match": "(?<={%)\\s*\\b(else|break|continue)\\b",
          "name": "keyword.control.liquid"
        },
        {
          "match": "(?<={%)\\s*\\b(if|unless|else|eslif|endunless|endif)\\b",
          "name": "keyword.control.conditional.liquid"
        },
        {
          "match": "(?<={%)\\s*\\b(for|endfor|cycle|tablerow|endtablerow)\\b",
          "name": "keyword.control.loop.liquid"
        },
        {
          "match": "(?<={%)\\s*\\b(case|when|endcase)\\b",
          "name": "keyword.control.switch.liquid"
        },
        {
          "match": "(?<={%)\\s*(\\w+)",
          "name": "entity.name.tag.liquid"
        },
        {
          "match": "(?<={%-)\\s*(\\w+)",
          "name": "entity.name.tag.liquid"
        }
      ]
    },
    "template_tag_keyword": {
      "patterns": [
        {
          "match": "\\b(reversed|in):",
          "name": "keyword.control.liquid"
        },
        {
          "match": "\\b(cols|offset|limit):",
          "name": "keyword.control.liquid"
        }
      ]
    },
    "object": {
      "begin": "{{-?",
      "end": "-?}}",
      "name": "meta.braces.liquid",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.braces.begin.liquid"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.braces.end.liquid"
        }
      },
      "patterns": [
        {
          "include": "#template_var"
        }
      ]
    },
    "number": {
      "match": "((-|\\+)\\s*)?[0-9]+(\\.[0-9]+)?",
      "name": "constant.numeric.liquid"
    },
    "string": {
      "patterns": [
        {
          "include": "#string_single"
        },
        {
          "include": "#string_double"
        }
      ]
    },
    "string_double": {
      "begin": "\"",
      "end": "\"",
      "name": "string.quoted.double.liquid"
    },
    "string_single": {
      "begin": "'",
      "end": "'",
      "name": "string.quoted.single.liquid"
    },
    "variable_lookup": {
      "patterns": [
        {
          "match": "\\b(additional_checkout_buttons|address|all_country_option_tags|all_products|article|articles|block|blog|blogs|canonical_url|cart|checkout|collection|collections|comment|content_for_additional_checkout_buttons|content_for_header|content_for_index|content_for_layout|country_option_tags|currency|current_page|current_tags|customer|customer_address|discount_allocation|discount_application|external_video|font|forloop|form|fulfillment|gift_card|handle|image|images|line_item|link|linklist|linklists|location|localization|metafield|model|model_source|order|page|page_description|page_image|page_title|pages|paginate|part|policy|powered_by_link|predictive_search|product|product_option|product_variant|recommendations|request|routes|script|scripts|search|section|selling_plan|selling_plan_allocation|selling_plan_group|settings|shipping_method|shop|shop_locale|store_availability|tablerow|tax_line|template|theme|transaction|unit_price_measurement|variant|video|video_source)\\b",
          "name": "variable.language.liquid"
        },
        {
          "match": "((?<=\\w\\:\\s)\\w+)",
          "name": "variable.parameter.liquid"
        },
        {
          "begin": "(?<=\\w)\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.brackets.begin.liquid"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.brackets.end.liquid"
            }
          },
          "name": "meta.brackets.liquid",
          "patterns": [
            {
              "include": "#string"
            }
          ]
        },
        {
          "match": "(?<=\\.)(\\w+)\\b",
          "name": "variable.other.member.liquid"
        },
        {
          "match": "(?<=\\w)\\.(?=\\w)",
          "name": "punctuation.accessor.liquid"
        },
        {
          "match": "(?i)[a-z_]\\w*",
          "name": "variable.other.liquid"
        }
      ]
    },
    "template_var": {
      "patterns": [
        {
          "match": "(\\[)(\\|)(?=[^\\]]*)(?=\\])",
          "captures": {
            "2": {
              "name": "invalid.illegal.filter.liquid"
            },
            "3": {
              "name": "invalid.illegal.filter.liquid"
            }
          }
        },
        {
          "match": "(?<=\\s)(\\+|\\-|\\/|\\*)(?=\\s)",
          "name": "invalid.illegal.filter.liquid"
        },
        {
          "match": "(false|true|nil|blank)",
          "name": "constant.language.liquid"
        },
        {
          "captures": {
            "3": {
              "name": "invalid.illegal.operator.liquid"
            }
          },
          "match": "(?=if|unless|elsif)\\s*[^%}]+\\s(in)\\s"
        },
        {
          "match": "\\s+(and|or|not|contains|in|by|((\\!|\\=|\\<|\\>)\\=))\\s+",
          "name": "keyword.operator.expression.liquid"
        },
        {
          "captures": {
            "2": {
              "name": "invalid.illegal.assignment.liquid"
            }
          },
          "match": "(?<=assign)([^\\=]+)(\\=\\=+)"
        },
        {
          "match": "\\|\\s+(?![\\.0-9])[a-zA-Z0-9_-]+\\:\\s+",
          "name": "support.function.with-args.liquid"
        },
        {
          "match": "\\|\\s+(?![\\.0-9])[a-zA-Z0-9_-]+\\s+",
          "name": "support.function.without-args.liquid"
        },
        {
          "match": "(?<=\\s)(with|offset\\:|limit\\:)(?=\\s)",
          "name": "keyword.control.liquid"
        },
        {
          "captures": {
            "2": {
              "name": "invalid.illegal.argument.liquid"
            }
          },
          "match": "(?<=include)(.*)(with\\:|offset|limit)(?=\\s)"
        },
        {
          "match": "(?<=\\s)(\\w+\\:)(?=\\:\\s)",
          "name": "invalid.illegal.liquid"
        },
        {
          "include": "#number"
        },
        {
          "include": "#string"
        },
        {
          "include": "#variable_lookup"
        }
      ]
    }
  }
}